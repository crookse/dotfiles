#!/bin/bash
#
# Load/process all logic in this file for the shells

#///////////////////////////////////////////////////////////////////////////////////////////////////
#// INITIAL SETTINGS ///////////////////////////////////////////////////////////////////////////////
#///////////////////////////////////////////////////////////////////////////////////////////////////

function dotfiles_echo() {
  echo -e "[.bashrc] ${1}"
}

bind "set completion-ignore-case on"   # Allow use of [Tab] to autocomplete file paths without considering letter case

export CLICOLOR=1                      # Enable color output
export LSCOLORS=excxFxFxBxxfxfxBxBxexe # Set directory colors
export EDITOR='vim'                    # Set terminal editor to vim
export TERM='xterm-256color'           # Support 256 colors

if [[ $__CROOKSE_ENV_VAR__PATH_SET == "path_set" ]]; then
  dotfiles_echo "Same session. PATH already set. Skipping."
elif [[ $__CROOKSE_ENV_VAR__PATH_SET == "path_full_reset" ]]; then
  echo -n "[.bashrc] Same session. Resetting PATH..."
  export PATH=$OG_PATH
  export __CROOKSE_ENV_VAR__PATH_SET="path_set"
  echo " Done."
else
  echo -n "[.bashrc] New session. Setting PATH..."
  export PATH=$PATH:$HOME/bin:$HOME/dotfiles
  # Flag the PATH as "already set" to prevent appending the PATH to the PATH when this file realods.
  export __CROOKSE_ENV_VAR__PATH_SET="path_set"
  export OG_PATH=$PATH
  echo " Done."
fi

dotfiles_echo "PATH is... \n  $(echo $PATH | sed -e $'s/:/\\\n  /g' | sort -r)"
dotfiles_echo "TERM is ${TERM}"

#///////////////////////////////////////////////////////////////////////////////////////////////////
#// VARIABLES //////////////////////////////////////////////////////////////////////////////////////
#///////////////////////////////////////////////////////////////////////////////////////////////////
#
# Set the root dotfiles directory based on the $HOME environment variable.
#

# Required variables
# Nothing here yet

# Your variables
# Nothing here yet

#///////////////////////////////////////////////////////////////////////////////////////////////////
#// INCLUDES ///////////////////////////////////////////////////////////////////////////////////////
#///////////////////////////////////////////////////////////////////////////////////////////////////
#
# Source files in the specified directories. Files are sourced alphabetically.
#

# Include files in the .bash directory
for file in $(ls ~/.bash); do
  source ~/.bash/$file
done

#///////////////////////////////////////////////////////////////////////////////////////////////////
#// PROMPTS ////////////////////////////////////////////////////////////////////////////////////////
#///////////////////////////////////////////////////////////////////////////////////////////////////
#
# Example output when in git directory:
#
#    git: (hello-world)
#    dir: /some/path
#    sys: Linux:someuser@local.mpb
#    cmd: 
#
# Example output in non-git directory:
#
#    dir: /some/path
#    sys: Linux:someuser@local.mpb
#    cmd: 
#
export PS1='$(__crookse_check_if_git)
dir: $(tput setaf 82)\w$(tput sgr0)
sys: $(uname):$(tput setaf 238)${USER}$(tput sgr0)@$(hostname)
cmd: '

#///////////////////////////////////////////////////////////////////////////////////////////////////
#// ALIASES ////////////////////////////////////////////////////////////////////////////////////////
#///////////////////////////////////////////////////////////////////////////////////////////////////
#
# Define session aliases. Some aliases use functions. Define those functions
# below and before the aliases.
#

unalias -a # Make sure the only aliases that ever get set are the ones defined below

#
# Set machine-specific aliases in the file below
#
if [ -f ~/dotfiles/.hidden/aliases.sh ]; then
  source ~/dotfiles/.hidden/aliases.sh
fi

#
# Add a spacer to the macOS Dock
#
__crookse_macdock_add_spacer() {
  defaults write com.apple.dock persistent-apps -array-add '{tile-data={}; tile-type="spacer-tile";}'
}

#
# Blow up (restart) the currently active shell
#
__crookse_moab() {
  option="${1}"
  case "${1}" in
    "full-restart")
      echo "[moab] FULL RESTART"
      export __CROOKSE_ENV_VAR__PATH_SET="path_full_reset"
      source ~/dotfiles/.bash_profile
      ;;
    *)
      source ~/dotfiles/.bash_profile
      ;;
  esac
}

alias files.hidden.on='defaults write com.apple.finder AppleShowAllFiles -bool TRUE && killall Finder'
alias files.hidden.off='defaults write com.apple.finder AppleShowAllFiles -bool FALSE && killall Finder'
alias ll='ls -la'
alias moab='__crookse_moab'
alias moab.full-restart='__crookse_moab full-restart'
alias MOAB='moab'
alias copy.etc.hosts='sudo cp ~/dotfiles/.hidden/etc/hosts /etc/hosts'
alias rm.dsstore='for file in $(find . | grep .DS_Store); do rm -i $file; done'
alias macdock.add.spacer='__crookse_macdock_add_spacer'

# Package Managers
## Composer
alias composer='composer.phar'

# Tmux
alias tmux='tmux -2'
alias tmux.boot='tmux new -s 0'
alias tmux.open='tmux attach -t 0'

# Vim
alias vi='mvim -v'  # Let's not start vi
alias vim='mvim -v' # Let's not start vim either

#-------------------------------------------------------------------------------
# Bash Profile
#-------------------------------------------------------------------------------
# 
# Finally, output that .bash_profile has been executed
# 

dotfiles_echo "Your .bashrc file was loaded!"
